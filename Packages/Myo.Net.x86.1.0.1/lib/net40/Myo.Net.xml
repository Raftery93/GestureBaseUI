<?xml version="1.0"?>
<doc>
    <assembly>
        "Myo.Net.v40"
    </assembly>
    <members>
        <member name="M:myo.Myo.#ctor(System.Void*)">
@endcond
</member>
        <member name="M:myo.Myo.libmyoObject">
@cond MYO_INTERNALS
Return the internal libmyo object corresponding to this device.
</member>
        <member name="M:myo.Myo.requestRssi">
Request the RSSI of the Myo. An onRssi event will likely be generated with the value of the RSSI.
@see DeviceListener::onRssi()
</member>
        <member name="M:myo.Myo.vibrate(myo.Myo.VibrationType)">
Vibrate the Myo.
</member>
        <member name="T:myo.Myo.VibrationType">
Types of vibration supported by the Myo.
</member>
        <member name="T:myo.Myo">
Represents a Myo device with a specific MAC address.
This class can not be instantiated directly; instead, use Hub to get access to a Myo.
There is only one Myo instance corresponding to each device; thus, if the addresses of two Myo instances compare
equal, they refer to the same device.
</member>
        <member name="M:myo.Hub.#ctor(myo.Hub!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@endcond
</member>
        <member name="M:myo.Hub.libmyoObject">
@cond MYO_INTERNALS
Return the internal libmyo object corresponding to this hub.
</member>
        <member name="M:myo.Hub.runOnce(System.UInt32)">
Run the event loop until a single event occurs, or the specified duration (in milliseconds) has elapsed.
</member>
        <member name="M:myo.Hub.run(System.UInt32)">
Run the event loop for the specified duration (in milliseconds).
</member>
        <member name="M:myo.Hub.removeListener(myo.DeviceListener*)">
Remove a previously registered listener.
</member>
        <member name="M:myo.Hub.addListener(myo.DeviceListener*)">
Register a listener to be called when device events occur.
</member>
        <member name="M:myo.Hub.waitForMyo(System.UInt32)">
Wait for a Myo to become paired, or time out after \a timeout_ms milliseconds if provided.
If \a timeout_ms is zero, this function blocks until a Myo is found.
This function must not be called concurrently with run() or runOnce().
</member>
        <member name="M:myo.Hub.Dispose">
Deallocate any resources associated with a Hub.
This will cause all Myo instances retrieved from this Hub to become invalid.
</member>
        <member name="M:myo.Hub.#ctor(std.basic_string&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte},std.allocator&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Construct a hub.
\a applicationIdentifier must follow a reverse domain name format (ex. com.domainname.appname). Application
identifiers can be formed from the set of alphanumeric ASCII characters (a-z, A-Z, 0-9). The hyphen (-) and
underscore (_) characters are permitted if they are not adjacent to a period (.) character  (i.e. not at the
start or end of each segment), but are not permitted in the top-level domain. Application identifiers must have
three or more segments. For example, if a company's domain is example.com and the application is named
hello-world, one could use "com.example.hello-world" as a valid application identifier. \a applicationIdentifier
can be an empty string.
Throws an exception of type std::invalid_argument if \a applicationIdentifier is not in the proper reverse
domain name format or is longer than 255 characters.
Throws an exception of type std::runtime_error if the hub initialization failed for some reason, typically
because Myo Connect is not running and a connection can thus not be established.
</member>
        <member name="T:myo.Hub">
@brief A Hub provides access to one or more Myo instances.
</member>
        <member name="M:myo.DeviceListener.onOpaqueEvent(System.Void!System.Runtime.CompilerServices.IsConst*)">
@cond LIBMYO_INTERNALS
</member>
        <member name="M:myo.DeviceListener.onRssi(myo.Myo*,System.UInt64,System.SByte)">
Called when a paired Myo has provided a new RSSI value.
@see Myo::requestRssi() to request an RSSI value from the Myo.
</member>
        <member name="M:myo.DeviceListener.onGyroscopeData(myo.Myo*,System.UInt64,myo.Vector3&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when a paired Myo has provided new gyroscope data in units of deg/s.
</member>
        <member name="M:myo.DeviceListener.onAccelerometerData(myo.Myo*,System.UInt64,myo.Vector3&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when a paired Myo has provided new accelerometer data in units of g.
</member>
        <member name="M:myo.DeviceListener.onOrientationData(myo.Myo*,System.UInt64,myo.Quaternion&lt;System.Single&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Called when a paired Myo has provided new orientation data.
</member>
        <member name="M:myo.DeviceListener.onPose(myo.Myo*,System.UInt64,myo.Pose)">
Called when a paired Myo has provided a new pose.
</member>
        <member name="M:myo.DeviceListener.onArmUnsync(myo.Myo*,System.UInt64)">
Called when a paired Myo is moved or removed from the arm.
</member>
        <member name="M:myo.DeviceListener.onArmSync(myo.Myo*,System.UInt64,myo.Arm,myo.XDirection)">
Called when a paired Myo recognizes that it is on an arm.
</member>
        <member name="M:myo.DeviceListener.onDisconnect(myo.Myo*,System.UInt64)">
Called when a paired Myo has been disconnected.
</member>
        <member name="M:myo.DeviceListener.onConnect(myo.Myo*,System.UInt64,myo.FirmwareVersion)">
Called when a paired Myo has been connected.
</member>
        <member name="M:myo.DeviceListener.onUnpair(myo.Myo*,System.UInt64)">
Called when a Myo has been unpaired.
</member>
        <member name="M:myo.DeviceListener.onPair(myo.Myo*,System.UInt64,myo.FirmwareVersion)">
Called when a Myo has been paired.
</member>
        <member name="T:myo.DeviceListener">
A DeviceListener receives events about a Myo.
@see Hub::addListener()
</member>
        <member name="T:myo.FirmwareVersion">
Firmware version of Myo.
</member>
        <member name="T:myo.XDirection">
Possible directions for Myo's +x axis relative to a user's arm.
</member>
        <member name="T:myo.Arm">
Enumeration identifying a right arm or left arm.
</member>
        <member name="E:MyoNet.Myo.Hub.LostArm">
            <summary>
Occurs when a paired Myo recognizes that it is on an arm. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Hub.RecognizedArm">
            <summary>
Occurs when a paired Myo recognizes that it is on an arm. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Hub.MyoUnpaired">
            <summary>
Occurs when a Myo has been unpaired. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Hub.MyoPaired">
            <summary>
Occurs when a Myo has been paired. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Hub.MyoDisconnected">
            <summary>
Occurs when a paired Myo has been disconnected. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Hub.MyoConnected">
            <summary>
Occurs when a paired Myo has been connected. 
</summary>
        </member>
        <member name="M:MyoNet.Myo.Hub.RunOnce(System.TimeSpan)">
            <summary>
Run the event loop until a single event occurs, or the specified <paramref name="duration" /> has elapsed. 
</summary>
            <param name="duration">The amount of time to run the event loop.</param>
        </member>
        <member name="M:MyoNet.Myo.Hub.Run(System.TimeSpan)">
            <summary>
Run the event loop for the specified <paramref name="duration" />. 
</summary>
            <param name="duration">The amount of time to run the event loop.</param>
        </member>
        <member name="M:MyoNet.Myo.Hub.RunOnce">
            <summary>
Run the event loop until a single event occurs. 
</summary>
        </member>
        <member name="M:MyoNet.Myo.Hub.Run">
            <summary>
Run the event loop.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Hub.WaitForMyo(System.TimeSpan)">
            <summary>
Wait for a Myo to become paired, or time out after <paramref name="timeout" />. 
</summary>
            <param name="timeout">The amount of time to wait until time out occurs.</param>
        </member>
        <member name="M:MyoNet.Myo.Hub.WaitForMyo">
            <summary>
Wait for a Myo to become paired.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Hub.Dispose">
            <summary>
Deallocate any resources associated with a Hub.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Hub.#ctor(System.String)">
            <summary>
Initializes a new instance of <see cref="T:MyoNet.Myo.Hub" /></summary>
            <param name="applicationIdentifier">The application identifier.</param>
        </member>
        <member name="M:MyoNet.Myo.Hub.#ctor">
            <summary>
Initializes a new instance of <see cref="T:MyoNet.Myo.Hub" /></summary>
        </member>
        <member name="T:MyoNet.Myo.Hub">
            <summary>A Hub provides access to one or more Myo instances.</summary>
        </member>
        <member name="M:MyoNet.Myo.Myo.RequestRssi">
            <summary>
Request the RSSI of the Myo.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Myo.Vibrate(MyoNet.Myo.VibrationType)">
            <summary>
Engage the Myo's built in vibration motor.
</summary>
            <params>
                <param name="type">The type of vibration.</param>
            </params>
        </member>
        <member name="E:MyoNet.Myo.Myo.PoseChanged">
            <summary>
Occurs when a paired Myo has provided a new pose. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Myo.Rssi">
            <summary>
Occurs when a paired Myo has provided a new RSSI value.
</summary>
        </member>
        <member name="E:MyoNet.Myo.Myo.GyroscopeDataAquired">
            <summary>
Occurs when a paired Myo has provided new gyroscope data in units of deg/s. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.Myo.AccelerometerDataAcquired">
            <summary>
Occurs when a paired Myo has provided new accelerometer data in units of g.
</summary>
        </member>
        <member name="E:MyoNet.Myo.Myo.OrientationDataAcquired">
            <summary>
Occurs when a paired Myo has provided new orientation data. 
</summary>
        </member>
        <member name="P:MyoNet.Myo.Myo.FirmwareVersion">
            <summary>
Gets the <see cref="P:MyoNet.Myo.Myo.FirmwareVersion" /> of the <see cref="T:MyoNet.Myo.Myo" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Myo.MacAddress">
            <summary>
Gets the Mac Address of the <see cref="T:MyoNet.Myo.Myo" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Myo.Name">
            <summary>
Gets the assigned name of the <see cref="T:MyoNet.Myo.Myo" />.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Myo.#ctor(System.Void*)">
            <summary>
Initializes a new instance of <see cref="T:MyoNet.Myo.Myo" />.
</summary>
        </member>
        <member name="T:MyoNet.Myo.Myo">
            <summary>
Represents a physical MyoNet Labs(TM) Myo(TM) Device.
</summary>
        </member>
        <member name="M:MyoNet.Myo.IMyo.RequestRssi">
            <summary>
Request the RSSI of the Myo.
</summary>
        </member>
        <member name="M:MyoNet.Myo.IMyo.Vibrate(MyoNet.Myo.VibrationType)">
            <summary>
Engage the Myo's built in vibration motor.
</summary>
            <params>
                <param name="type">The type of vibration.</param>
            </params>
        </member>
        <member name="E:MyoNet.Myo.IMyo.PoseChanged">
            <summary>
Occurs when a paired Myo has provided a new pose. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.IMyo.Rssi">
            <summary>
Occurs when a paired Myo has provided a new RSSI value.
</summary>
        </member>
        <member name="E:MyoNet.Myo.IMyo.GyroscopeDataAquired">
            <summary>
Occurs when a paired Myo has provided new gyroscope data in units of deg/s. 
</summary>
        </member>
        <member name="E:MyoNet.Myo.IMyo.AccelerometerDataAcquired">
            <summary>
Occurs when a paired Myo has provided new accelerometer data in units of g.
</summary>
        </member>
        <member name="E:MyoNet.Myo.IMyo.OrientationDataAcquired">
            <summary>
Occurs when a paired Myo has provided new orientation data. 
</summary>
        </member>
        <member name="P:MyoNet.Myo.IMyo.FirmwareVersion">
            <summary>
Gets the <see cref="P:MyoNet.Myo.IMyo.FirmwareVersion" /> of the <see cref="N:MyoNet.Myo" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.IMyo.MacAddress">
            <summary>
Gets the Mac Address of the <see cref="N:MyoNet.Myo" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.IMyo.Name">
            <summary>
Gets the assigned name of the <see cref="N:MyoNet.Myo" />.
</summary>
        </member>
        <member name="T:MyoNet.Myo.IMyo">
            <summary>
Interface to a instance of a Myo device.
</summary>
        </member>
        <member name="M:MyoNet.Myo.FirmwareVersion.ToString">
            <summary>
Returns a String representing this FirmwareVersion instance.
</summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.FirmwareVersion.Equals(MyoNet.Myo.FirmwareVersion)">
            <summary>
Determines whether the specified FirmwareVersion is equal to this FirmwareVersion instance.
</summary>
            <params>
                <param name="firmwareVersion">The FirmwareVersion to compare against.</param>
            </params>
            <returns>True if the FirmwareVersion is equal to this FirmwareVersion; False otherwise.</returns>
        </member>
        <member name="M:MyoNet.Myo.FirmwareVersion.Equals(System.Object)">
            <summary>
Determines whether the specified object is equal to this FirmwareVersion instance.
</summary>
            <params>
                <param name="obj">The Object to compare against.</param>
            </params>
            <returns>True if the Object is equal to this FirmwareVersion; False otherwise.</returns>
        </member>
        <member name="M:MyoNet.Myo.FirmwareVersion.GetHashCode">
            <summary> 
Returns the hash code for this FirmwareVersion instance. 
</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MyoNet.Myo.FirmwareVersion.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
Initializes a new instance of <see cref="T:MyoNet.Myo.FirmwareVersion" /> with specified integers.
</summary>
        </member>
        <member name="F:MyoNet.Myo.FirmwareVersion.FirmwareVersionHardwareRev">
            <summary>
Myo's hardware revision; not used to detect firmware version mismatch.
</summary>
        </member>
        <member name="F:MyoNet.Myo.FirmwareVersion.FirmwareVersionPatch">
            <summary>
Myo's patch version must greater or equal to the required patch version.
</summary>
        </member>
        <member name="F:MyoNet.Myo.FirmwareVersion.FirmwareVersionMinor">
            <summary>
Myo's minor version must match the required minor version.
</summary>
        </member>
        <member name="F:MyoNet.Myo.FirmwareVersion.FirmwareVersionMajor">
            <summary>
Myo's major version must match the required major version.
</summary>
        </member>
        <member name="T:MyoNet.Myo.FirmwareVersion">
            <summary>
Structure representing the firmware version of Myo.
</summary>
        </member>
        <member name="T:MyoNet.Myo.VibrationType">
            <summary>
Types of vibration supported by the Myo. 
</summary>
        </member>
        <member name="T:MyoNet.Myo.XDirection">
            <summary>
Possible directions for Myo's +x axis relative to a user's arm.
</summary>
        </member>
        <member name="T:MyoNet.Myo.Arm">
            <summary>
Enumeration identifying a right arm or left arm.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.ToString(System.String,System.IFormatProvider)">
            <summary>
Returns a String representing this Quaternion instance, using the specified format and a IFormatProvider.
</summary>
            <params>
                <param name="format">The format of the individual elements.</param>
                <param name="formatProvider">The format provider used to format individual elements.</param>
            </params>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.ToString(System.String)">
            <summary>
Returns a String representing this Quaternion instance, using the specified format.
</summary>
            <params>
                <param name="format">The format of the individual elements.</param>
            </params>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.ToString">
            <summary>
Returns a String representing this Quaternion instance.
</summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Equals(MyoNet.Myo.Quaternion)">
            <summary>
Determines whether the specified Quaternion is equal to this Quaternion instance.
</summary>
            <params>
                <param name="other">The Quaternion to compare against.</param>
            </params>
            <returns>True if the Quaternion is equal to this Quaternion; False otherwise.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Equals(System.Object)">
            <summary>
Determines whether the specified object is equal to this Quaternion instance.
</summary>
            <params>
                <param name="obj">The Object to compare against.</param>
            </params>
            <returns>True if the Object is equal to this Quaternion; False otherwise.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.GetHashCode">
            <summary> 
Returns the hash code for this Quaternion instance. 
</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Normalized">
            <summary>
Return a new unit <see cref="T:MyoNet.Myo.Quaternion" /> corresponding to the same rotation as this one.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Inverse">
            <summary>
Gets the inverse of the <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.op_Multiply(MyoNet.Myo.Quaternion,MyoNet.Myo.Quaternion)">
            <summary>
Multiplies the specified <see cref="T:MyoNet.Myo.Quaternion" />'s.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.op_Subtraction(MyoNet.Myo.Quaternion,MyoNet.Myo.Quaternion)">
            <summary>
Subtracts a <see cref="T:MyoNet.Myo.Quaternion" /> from another.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.op_Addition(MyoNet.Myo.Quaternion,MyoNet.Myo.Quaternion)">
            <summary>
Adds the specified <see cref="T:MyoNet.Myo.Quaternion" />'s.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Yaw(MyoNet.Myo.Quaternion)">
            <summary>
Calculate the yaw angle represented by the given unit <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
            <params>
                <param name="quat">A unit <see cref="T:MyoNet.Myo.Quaternion" />.</param>
            </params>
            <returns>The yaw angle in radians.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Pitch(MyoNet.Myo.Quaternion)">
            <summary>
Calculate the pitch angle represented by the given unit <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
            <params>
                <param name="quat">A unit <see cref="T:MyoNet.Myo.Quaternion" />.</param>
            </params>
            <returns>The pitch angle in radians.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Roll(MyoNet.Myo.Quaternion)">
            <summary>
Calculate the roll angle represented by the given unit <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
            <params>
                <param name="quat">A unit <see cref="T:MyoNet.Myo.Quaternion" />.</param>
            </params>
            <returns>The roll angle in radians.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.LengthSquared">
            <summary>
Gets the length squared of the <see cref="T:MyoNet.Myo.Quaternion" /></summary>
            <returns>The squared length of the <see cref="T:MyoNet.Myo.Quaternion" />.</returns>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.Length">
            <summary>
Gets the length of the <see cref="T:MyoNet.Myo.Quaternion" /></summary>
            <returns>The length of the <see cref="T:MyoNet.Myo.Quaternion" />.</returns>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.default(System.Int32)">
            <summary>
Get or set a component in the <see cref="T:MyoNet.Myo.Quaternion" /> by index.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
Initializes a new instance of the <see cref="T:MyoNet.Myo.Quaternion" /> with the specified components.
</summary>
            <params>
                <param name="x">The x component of the <see cref="T:MyoNet.Myo.Quaternion" />.</param>
                <param name="y">The y component of the <see cref="T:MyoNet.Myo.Quaternion" />.</param>
                <param name="z">The z component of the <see cref="T:MyoNet.Myo.Quaternion" />.</param>
                <param name="w">The w component of the <see cref="T:MyoNet.Myo.Quaternion" />.</param>
            </params>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.W">
            <summary>
Gets or sets the w component of the <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.Z">
            <summary>
Gets or sets the z component of the <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.Y">
            <summary>
Gets or sets the y component of the <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.X">
            <summary>
Gets or sets the x component of the <see cref="T:MyoNet.Myo.Quaternion" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.Identity">
            <summary>
Returns a Quaternion representing no rotation.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Quaternion.Zero">
            <summary>
Represents a quaternion that has X, Y, Z and W values set to zero.
</summary>
        </member>
        <member name="T:MyoNet.Myo.Quaternion">
            <summary>
Structure that represents a rotation in three dimensions.
</summary>
        </member>
        <member name="T:MyoNet.Myo.Pose">
            <summary>
Types of poses supported by the SDK. 
</summary>
        </member>
        <member name="M:myo.op_LeftShift(std.basic_ostream&lt;System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte,std.char_traits{System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte}&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,myo.Pose!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
@relates Pose
Write the name of the provided pose to the provided output stream.
</member>
        <member name="M:myo.op_Inequality(myo.Pose.Type,myo.Pose)">
@relates Pose
Equivalent to `!(type == pose)`.
</member>
        <member name="M:myo.op_Inequality(myo.Pose,myo.Pose.Type)">
@relates Pose
Equivalent to `!(pose == type)`.
</member>
        <member name="M:myo.op_Equality(myo.Pose.Type,myo.Pose)">
@relates Pose
Equivalent to `pose == type`.
</member>
        <member name="M:myo.op_Equality(myo.Pose,myo.Pose.Type)">
@relates Pose
Returns true if and only if the type of pose is the same as the provided type.
</member>
        <member name="M:myo.Pose.toString">
Return a human-readable string representation of the pose.
</member>
        <member name="M:myo.Pose.type">
Returns the type of this pose.
</member>
        <member name="M:myo.Pose.op_Inequality(myo.Pose)">
Equivalent to `!(*this == other)`.
</member>
        <member name="M:myo.Pose.op_Equality(myo.Pose)">
Returns true if and only if the two poses are of the same type.
</member>
        <member name="M:myo.Pose.#ctor(myo.Pose.Type)">
Construct a pose with the given type.
</member>
        <member name="M:myo.Pose.#ctor">
Construct a pose of type Pose::none.
</member>
        <member name="T:myo.Pose.Type">
Types of poses supported by the SDK.
</member>
        <member name="T:myo.Pose">
A pose represents a detected configuration of the user's hand.
</member>
        <member name="M:MyoNet.Myo.Vector3.ToString(System.String,System.IFormatProvider)">
            <summary>
Returns a String representing this Vector3 instance, using the specified format and a IFormatProvider.
</summary>
            <params>
                <param name="format">The format of the individual elements.</param>
                <param name="formatProvider">The format provider used to format individual elements.</param>
            </params>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.ToString(System.String)">
            <summary>
Returns a String representing this Vector3 instance, using the specified format.
</summary>
            <params>
                <param name="format">The format of the individual elements.</param>
            </params>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.ToString">
            <summary>
Returns a String representing this Vector3 instance.
</summary>
            <returns>The string representation</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.Equals(MyoNet.Myo.Vector3)">
            <summary>
Determines whether the specified Vector3 is equal to this Vector3 instance.
</summary>
            <params>
                <param name="other">The Vector3 to compare against.</param>
            </params>
            <returns>True if the Vector3 is equal to this Vector3; False otherwise.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.Equals(System.Object)">
            <summary>
Determines whether the specified object is equal to this Vector3 instance.
</summary>
            <params>
                <param name="obj">The Object to compare against.</param>
            </params>
            <returns>True if the Object is equal to this Vector3; False otherwise.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.GetHashCode">
            <summary> 
Returns the hash code for this Vector3 instance. 
</summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.AngleTo(MyoNet.Myo.Vector3,MyoNet.Myo.Vector3)">
            <summary>
Calculates the angle between the <see cref="T:MyoNet.Myo.Vector3" />'s <paramref name="lhs" /> and <paramref name="rhs" />.
</summary>
            <params>
                <param name="lhs">A vector used to calculate the angle from.</param>
                <param name="rhs">A vector used to calculate the angle to.</param>
            </params>
            <returns>The angle in radians.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.CrossProduct(MyoNet.Myo.Vector3,MyoNet.Myo.Vector3)">
            <summary>
Calculates the cross product of the <see cref="T:MyoNet.Myo.Vector3" />'s <paramref name="lhs" /> and <paramref name="rhs" />.
</summary>
            <params>
                <param name="lhs">A vector used to calculate the cross product.</param>
                <param name="rhs">A vector used to calculate the cross product.</param>
            </params>
            <returns>A new vector representing the cross product.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.DotProduct(MyoNet.Myo.Vector3,MyoNet.Myo.Vector3)">
            <summary>
Calculates the dot product of the <see cref="T:MyoNet.Myo.Vector3" />'s <paramref name="lhs" /> and <paramref name="rhs" />.
</summary>
            <params>
                <param name="lhs">A vector used to calculate the dot product.</param>
                <param name="rhs">A vector used to calculate the dot product.</param>
            </params>
            <returns>The dot product.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.Normalized">
            <summary>
Return a new unit <see cref="T:MyoNet.Myo.Vector3" /> corresponding to the same direction as this one.
</summary>
            <returns>A unit length vector.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.op_Division(MyoNet.Myo.Vector3,System.Double)">
            <summary>
Divides the <see cref="T:MyoNet.Myo.Vector3" /> by specified scalar <paramref name="value" /></summary>
        </member>
        <member name="M:MyoNet.Myo.Vector3.op_Multiply(System.Double,MyoNet.Myo.Vector3)">
            <summary>
Multiplies the <see cref="T:MyoNet.Myo.Vector3" /> by specified scalar <paramref name="value" /></summary>
        </member>
        <member name="M:MyoNet.Myo.Vector3.op_Multiply(MyoNet.Myo.Vector3,System.Double)">
            <summary>
Multiplies the <see cref="T:MyoNet.Myo.Vector3" /> by specified scalar <paramref name="value" /></summary>
        </member>
        <member name="M:MyoNet.Myo.Vector3.op_Subtraction(MyoNet.Myo.Vector3,MyoNet.Myo.Vector3)">
            <summary>
Subtracts a <see cref="T:MyoNet.Myo.Vector3" /> from another.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Vector3.op_Addition(MyoNet.Myo.Vector3,MyoNet.Myo.Vector3)">
            <summary>
Adds the specified <see cref="T:MyoNet.Myo.Vector3" />'s.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Vector3.LengthSquared">
            <summary>
Gets the length squared of the vector.
</summary>
            <returns>The squared length of the <see cref="T:MyoNet.Myo.Vector3" />.</returns>
        </member>
        <member name="M:MyoNet.Myo.Vector3.Length">
            <summary>
Gets the length of the vector.
</summary>
            <returns>The length of the <see cref="T:MyoNet.Myo.Vector3" />.</returns>
        </member>
        <member name="P:MyoNet.Myo.Vector3.default(System.Int32)">
            <summary>
Get or set a component in the <see cref="T:MyoNet.Myo.Vector3" /> by index.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Vector3.Z">
            <summary>
Gets or sets the z component of the <see cref="T:MyoNet.Myo.Vector3" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Vector3.Y">
            <summary>
Gets or sets the y component of the <see cref="T:MyoNet.Myo.Vector3" />.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Vector3.X">
            <summary>
Gets or sets the x component of the <see cref="T:MyoNet.Myo.Vector3" />.
</summary>
        </member>
        <member name="M:MyoNet.Myo.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
Initializes a new instance of the <see cref="T:MyoNet.Myo.Vector3" /> with the specified components.
</summary>
            <params>
                <param name="x">The x component of the <see cref="T:MyoNet.Myo.Vector3" />.</param>
                <param name="y">The y component of the <see cref="T:MyoNet.Myo.Vector3" />.</param>
                <param name="z">The z component of the <see cref="T:MyoNet.Myo.Vector3" />.</param>
            </params>
        </member>
        <member name="P:MyoNet.Myo.Vector3.UnitZ">
            <summary>
Represents a vector that has Z value set to one and the X, Y values set to zero.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Vector3.UnitY">
            <summary>
Represents a vector that has Y value set to one and the X, Z values set to zero.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Vector3.UnitX">
            <summary>
Represents a vector that has X value set to 1 and the Y, Z values set to zero.
</summary>
        </member>
        <member name="P:MyoNet.Myo.Vector3.Zero">
            <summary>
Represents a vector that has X, Y, and Z values set to zero.
</summary>
        </member>
        <member name="T:MyoNet.Myo.Vector3">
            <summary>
A vector of three components.
</summary>
        </member>
        <member name="M:MyoNet.Myo.HashCodeHelper.CombineHashCodes(System.Int32,System.Int32)">
            <summary> 
Combines two hash codes, useful for combining hash codes of individual vector elements 
</summary>
        </member>
        <member name="P:MyoNet.Myo.MyoEventArgs.TimeStamp">
            <summary>
Gets the time stamp at which the event occurred.
</summary>
        </member>
        <member name="P:MyoNet.Myo.MyoEventArgs.Myo">
            <summary>
Gets the <see cref="T:MyoNet.Myo.IMyo" /> associated with the event.
</summary>
        </member>
        <member name="M:MyoNet.Myo.MyoEventArgs.#ctor(MyoNet.Myo.IMyo,System.DateTimeOffset)">
            <summary>
Initializes a new instance of <see cref="T:MyoNet.Myo.MyoEventArgs" />.
</summary>
        </member>
    </members>
</doc>